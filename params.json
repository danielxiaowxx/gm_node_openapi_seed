{"name":"Gm node openapi seed","tagline":"gm_node_openapi_seed","body":"## 作者简介\r\n\r\nDaniel.xiao，[环球市场(GlobalMarket)](http://www.globalmarket.com \"让'中国制造'成为优质标志\")IT研发部架构师\r\n\r\n## 如何开始\r\n\r\n1. 安装node (略)\r\n\r\n2. 下载gm\\_node\\_openapi\\_seed项目，根据实际情况更换名字，如pa\\_node\\_openapi\r\n \r\n3. cd进入pa\\_node\\_openapi目录，执行**npm install**命令\r\n\r\n4. 执行**node main.js**命令开启服务\r\n\r\n5. 打开浏览器，输入http://127.0.0.1:8080/demo/sayHello?name=daniel，如果显示\t\t\t\r\n\r\n\t\t{\"error\":false,\"result\":\"hello daniel\"}\r\n   恭喜，openapi服务已成功运行\r\n\r\n## javascript调用open API示例\r\n\r\n以下为指定版本号v的示例，可以不指定版本号，默认调用最新版本的API\r\n\r\n*1.POST or GET Call (以下使用jquery)*\r\n\r\n\t$.ajax( '/[app context]/demo/sayHello?v=1.0.0', {\r\n\t　 type: 'POST', // or 'GET'\r\n\t   data: {name: 'daniel'},\r\n\t   success: function(data) {\r\n\t     console.log(data);\r\n\t   },\r\n\t   error: function(err) {\r\n\t     console.log(err.responseText);\r\n\t   }\r\n\t});\r\n\r\n*2.JSONP Call (以下使用jquery)* \t\r\n\r\n\t$.ajax({\r\n\t    type: 'GET',\r\n\t    url: 'http://127.0.0.1:8080/demo/sayHello?callback=?&v=1.0.0',\r\n        data: {name: 'daniel'},\r\n\t    dataType: 'jsonp',\r\n\t    success: function(data) {\r\n\t       console.log(data);\r\n\t    }\r\n\t});\r\n\r\n## 如何增加open API方法\r\n\r\n在routes目录下，增加js文件以及相应的方法，并在index.js文件中注册服务即可\r\n  \r\n*示例：增加示例服务的sayHello方法*  \r\n*1.增加routes/demo.js文件，增加sayHello方法*\r\n\r\n\t...\r\n\texports.sayHello = function(name) {\r\n\t    return 'hello ' + name;\r\n\t}\r\n\r\n*2.在inddex.js文件中注册服务*\r\n\r\n\tvar demo = require('./demo'); // 注意1：变量名一定要与文件名相同\r\n\r\n\texports.Routes = {\r\n\t    '1.0.0': {\r\n\t        'Demo': {\r\n\t            'demo/sayHello': {handleFnName:'demo.sayHello', handelFn:demo.sayHello} // 注意2：handleFnName与handelFn的值一定要相同，只是一个是字符串，一个是函数\r\n\t        }\r\n\t    }\r\n\t}\r\n\r\n## 在API实现中如何打印日志\r\n\r\n1. 引入gmframewordk模块\r\n\r\n\t\tvar gmfw = require('../common/gmframework');\r\n\r\n２. 在方法中声明log对象并调用其相应的方法\r\n\r\n\t\texports.sayHello = function(name) {\r\n\t\t    var log = gmfw.util.getLogger(arguments);\r\n\t\t\r\n\t\t    log.info('haha');\r\n\t\t\r\n\t\t    ……\r\n\t\t}\r\n\r\n## API方法注释规范\r\n\r\n\t/**\r\n\t * [comment summary]\r\n\t *\r\n\t * [comment body]\r\n\t *\r\n\t * @param {[String|Array|Object|Number]} [param name] [param description]\r\n\t * @return {[String|Array|Object|Number]} [return description]\r\n\t */\r\n\r\n注意：@**的说明必须在同一行，如以下：\r\n\r\n*正确*：\r\n\r\n\t@param {String} name say hello to who\r\n\r\n*错误*：\r\n\r\n\t@param {String} name \r\n\tsay hello to who\r\n\t\r\n*举例*：\r\n\r\n\t/**\r\n\t * Just say hello ------------------------------------- [comment summary]\r\n\t *\r\n\t * Examples: ------------------------------------------ [comment body]\r\n\t *\r\n\t *   ......\r\n\t *\r\n\t * @param {String} name say hello to who -------------- [@param]\r\n\t * @return {Object} format:{name:'', message:''} ------ [@return]\r\n\t */\r\n\texports.sayHello = function(name) {\t\r\n\t    return {name:name, message:'hello ' + name};\r\n\t}\r\n\r\n## 单元测试\r\n\r\n在unittest/unittest.js中按照路由的配置(routes/index.js)对各个路径进行单元测试:\r\n\r\n1. 配置\r\n\r\n\t- 当不启动登录认证时（即config.js中的Auth.required = false），配置如下\r\n\t\r\n\t\t    setUp: function (callback) {\r\n\t\t        // config\r\n\t\t        this.server = 'http://localhost:8080';\r\n\t\t\r\n\t\t        this.httpRequest = request.defaults({\r\n\t\t            json: true\r\n\t\t        });\r\n\t\t\r\n\t\t        ......\r\n\t\t    }\r\n\t\r\n\t- 当启动登录认证时（即config.js中的Auth.required = true），配置如下\r\n\t \r\n\t\t    setUp: function (callback) {\r\n\t\t        // config\r\n\t\t        this.server = 'http://local.globalmarket.com/nodeopenapi';\r\n\t\t\r\n\t\t        this.httpRequest = request.defaults({\r\n\t\t            json: true,\r\n\t\t            headers: {\r\n\t\t                cookie: 'JSESSIONID=3FC1C68B7BBCC87EFFE6237D22FFD180-n1;'\r\n\t\t            }\r\n\t\t        });\r\n\t\t\r\n\t\t        callback();\r\n\t\t    }\r\n\t\r\n\t\t*注意几点：*\t\r\n\t\t1. local.globalmarket.com指向本地\t\r\n\t\t2. 本地nignx的nodeopenapi转向localhost:8080，如下配置\r\n\t\t\r\n\t\t\t\tlocation ~ ^/nodeopenapi/ {\r\n\t\t\t        proxy_set_header  Host $host;\r\n\t\t\t\t    rewrite  /nodeopenapi(.*)$ $1 break;\r\n\t\t\t\t    proxy_pass http://localhost:8080;\r\n\t\t\t\t}\r\n\r\n\t\t3. 浏览器打开http://*.globalmarket.com，用账号登录，然后把登录的JSESSIONID值代换上面的值\r\n\r\n2. 增加单元测试方法\r\n\r\n\t按照路由配置(routes/index.js)，将路径的处理部分换成测试方法，如下所示：\r\n\r\n\t    '1.0.0': {\r\n        'Demo': {\r\n            'demo/sayHello': {\r\n                // 测试传参数\r\n                test1: function (test) {\r\n                    var name = 'daniel';\r\n                    this.httpRequest.get(this.server + '/demo/sayHello?' + qs.stringify({name:name}), {}, function(error, response, body) {\r\n                        if (!commonHTTPTest(test, error, body)) {\r\n                            test.done();\r\n                        } else {\r\n                            // 其它测试\r\n                            test.equal(body.result, 'Hello ' + name, JSON.stringify(body));\r\n                            test.done();\r\n                        }\r\n                    });\r\n                },\r\n                // 测试不传参数\r\n                test2: function(test) {\r\n                    this.httpRequest.get(this.server + '/demo/sayHello', {}, function(error, response, body) {\r\n                        commonHTTPTest(test, error, body);\r\n                        test.done();\r\n                    });\r\n                }\r\n            },\r\n\t\t\t......\r\n\r\n\t单元测试用到了nodeunit，具体的测试API方法请参考https://github.com/caolan/nodeunit#api-documentation\r\n\t\r\n\thttp请求用到了request，具体的请求方法请参考https://github.com/mikeal/request#convenience-methods\r\n\r\n3. 运行单元测试\r\n\r\n\t\tgrunt unittest\r\n\r\n\t运行成功后，可将unittest/report/index.html拖到浏览器即可浏览 \t\r\n\r\n## 如何配置连接mongodb\r\n\r\ndb/gmMongodb.js管理所有mongodb的连接，当需要增加连接的mongodb，需要配置如下：\r\n\r\n1. 在conf/config.js增加mongodb连接参数，如下所示   \r\n\r\n\t\t/* format: [dbname]_url */    \r\n\t\tMongoDB.demo_url = 'mongodb://192.168.88.225:27017/demo';\r\n\r\n2. 在db/gmMongodb.js增加相关的代码    \r\n\r\n\t\t......\r\n\t\tvar demoDB; // 1，增加DB对象\r\n\t\t......\r\n\t\texports.connect = function() {\r\n\t\t\t......\r\n\t\t\t// 2.增加连接代码\r\n\t\t    MongoClient.connect(config.MongoDB.demo_url, function (err, db) {\r\n\t\t        if (err) {\r\n            \t\tconsole.error(\"Connect to MongoDB error: \", err);\r\n        \t\t}\r\n\t\t        demoDB = db;\r\n\t\t    });\r\n\t\t} \r\n\t\t......\r\n        // 3.增加取DB对象的方法\r\n\t\texports.getGMDataDB = function() {\r\n\t\t    return demoDB;\r\n\t\t}\r\n\r\n## 如何增加DAO层方法\r\n\r\n在对应的dao文件增加方法即可，以下为示例模板\r\n\r\n    exports.mongoTest = function() {\r\n        var collection = gmMongo.getGMDataDB().collection('m_landing_page');\r\n        return Promise.promisify(collection.findOne, collection)({channelType: 'lighting'})\r\n            .then(function(data) { // 可对数据进行加工\r\n                return data.data;\r\n            });\r\n    }\r\n\r\n## 连接oracle数据库注意事项\r\n\r\n如果是window7 64位系统，项目已经提供了编译好的node oracle module（debris/oracle.zip）,只需要解压到node_modules目录即可，然后还需要以下步骤\r\n\r\n1. 下载oracle instant client\r\n\r\n    这里提供window 64位的下载地址：http://www.oracle.com/technetwork/topics/winx64soft-089540.html\r\n    下载instantclient-basic-windows.x64-12.1.0.1.0.zip和instantclient-sdk-windows.x64-12.1.0.1.0.zip\r\n    下载完后都解压到C:\\instantclient_12_1\r\n\r\n2. 设置环境变量如下　\r\n\r\n        OCI_INCLUDE_DIR=C:\\instantclient_12_1\\sdk\\include\r\n        OCI_LIB_DIR=C:\\instantclient_12_1\\sdk\\lib\\msvc\\vc11\r\n        Path=...;c:\\instantclient_12_1\\vc11;c:\\instantclient_12_1\r\n\r\n## 有用的gmOracleDB方法\r\n\r\n- executeSql(sql, params)  \r\n  作用：执行sql语句 \r\n  \r\n\t*使用例子*：\r\n\r\n        var sql = 'select count(0) count from acc$user';\r\n        return gmOracle.executeSql(sql, []);\r\n\r\n- getSequenceVal(seq)    \r\n  作用：取得序列值  \r\n\r\n\t*使用例子*：\r\n\r\n\t\tvar seqName = 'SQ_ACC$USER';\r\n\t\tgmOracledb.getSequenceVal(seqName).then(function(seq) {\r\n\t\t\t......    \r\n\t\t});\r\n\r\n- buildPageSql(pageNum, pageSize, strSql)    \r\n  作用：生成分页sql语句\r\n\r\n\t*使用例子*：\r\n\r\n\t\tvar pageNum = 1, pageSize = 10, sql = '...';\r\n\t\tvar pageSql = gmOracledb.buildPageSql(pageNum, pageSize, sql);\r\n\r\n- allFieldsToCamel(result)   \r\n  将数组中的对象元素的所有key格式成camel格式，用于处理executeSql得到的结果(得到的原始result数据里面的字段全部是大写的，所以需要转换成驼峰式的格式)\r\n\r\n\t*使用例子*：\r\n\r\n\t\tdeferred.resolve(gmOracle.allFieldsToCamel(result));\r\n\r\n## 有用的gmMysqldb方法 \r\n\r\n- executeSql(sql, params)  \r\n  作用：执行sql语句\r\n\r\n\t*使用例子*：\r\n\r\n        var sql = 'select count(0) count from sales_order';\r\n        return gmMysql.executeSql(sql, []);\r\n\r\n- buildPageSql(pageNum, pageSize, strSql)    \r\n  作用：生成分页sql语句\r\n\r\n\t*使用例子*：\r\n\r\n\t\tvar pageNum = 1, pageSize = 10, sql = '...';\r\n\t\tvar pageSql = gmMysqldb.buildPageSql(pageNum, pageSize, sql);\r\n\r\n## 如何处理异常\r\n\r\n当需要手动处理异常时，直接返回异常对象即可。可用restify已经定义的异常或自定义异常\r\n\r\n*1.返回restify已经定义的异常*\r\n\r\n\tvar restify = require('restify'),\r\n\t\t...\r\n\r\n\texports.sayHello = function(name) {\t\r\n\t    if (!name) {\r\n\t        return new restify.InvalidArgumentError('name must not be null');\r\n\t        // promise里面可用throw new restify.InvalidArgumentError('name must not be null');\r\n\t    }\r\n\t}\r\n\r\n*2.返回自定义异常*\r\n\r\n\tvar errors = require('../error/errors'),\r\n\t\t...\r\n\r\n\texports.sayHello = function(name) {\t\r\n\t    return new errors.OtherError('I just do not like you!');\r\n\t}\r\n \r\n\r\n## 如何自定义异常对象\r\n\r\n在error/errors.js中调用regError方法注册异常类型即可。  \r\n \r\n*示例：增加异常名称为UserNotExist,statusCode为400(statusCode定义的范围最好在400-5\\*\\*)的自定义异常*\r\n\r\n\r\n\tgmfw.regError('UserNotExist', 400);\r\n\r\n## 返回数据格式\r\n\r\n正常响应示例：\r\n\r\n\t{\r\n        result: {...} | [...] | ... // 数据类型返回什么即是什么\r\n    }\r\n\r\n异常响应请捕获statusCode为400～5\\*\\*的响应\r\n\r\n    {\"code\": \"...\", \"message\":\"...\"}\r\n\r\n## 如何生成API文档\r\n\t\r\n1. 运行genAPIDoc.js文件\r\n\r\n\t\tgrunt genDoc\r\n\r\n2. 直接将apidoc/index.html拖到浏览器即可浏览\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}